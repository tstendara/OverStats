'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

let findPlayer = (() => {
  var _ref = _asyncToGenerator(function* (req, options, name) {
    // Turn the last dash, or pound sign, into a URL-encoded pound sign, so we can get
    // a positive match including the account ID
    const nameEscaped = name.replace(/[-#](\d+)$/, '%23$1'); // # == %23

    // Note that the pound sign here is ignored, we keep it in just to make
    // debug logs clearer, and because it doesn't cause any harm:
    const searchPath = (0, _urlJoin2.default)('/search/account-by-name', nameEscaped);

    log('findPlayer/http get', searchPath);

    const response = yield req.get(searchPath, { json: true });

    log('findPlayer/http complete', response);

    const accounts = response.map(function (account) {
      return {
        level: account.level,
        portrait: portraitUrl(account.portrait, options),
        displayName: account.platformDisplayName,
        platform: account.platform,
        public: account.isPublic
      };
    });

    return {
      name: name.replace('#', '-'),
      accounts
    };
  });

  return function findPlayer(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
})();

// Converts a portrait identifier (really just a filename as far as we care)
// into a full url for the portrait image


// Scrapes the playoverwatch website for details on a players' career, for
// a given platform.
let findPlayerStats = (() => {
  var _ref2 = _asyncToGenerator(function* (req, options, platform, name) {
    const scrapePath = (0, _urlJoin2.default)('/career', platform, name);
    log('findPlayerStats/http get', scrapePath);

    const html = yield req.get(scrapePath);

    log('findPlayerStats/http complete');

    const stats = (0, _scraper.scrapePlayerStats)(options, html);
    return { name, platform, stats };
  });

  return function findPlayerStats(_x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
})();

// Accepts an options object (taking precedence over defaultOptions)
// and returns a new oversmash object


exports.default = main;

var _urlJoin = require('url-join');

var _urlJoin2 = _interopRequireDefault(_urlJoin);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _scraper = require('./scraper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const log = (0, _debug2.default)('oversmash');

const defaultOptions = {
  normalizeNames: true,
  normalizeValues: true,
  normalizeNamesAs: 'snake',
  percentsToInts: true,
  defaultPlatform: 'pc',
  portraitUrlTemplate: 'https://d1u1mce87gyfbn.cloudfront.net/game/unlocks/%s.png',
  requestOptions: {
    baseUrl: 'https://playoverwatch.com/en-us',
    headers: {
      'User-Agent': 'https://github.com/filp/oversmash (hi jeff)'
    }
  }

  // Uses an internal Blizzard API to retrieve basic details about a player,
  // through their Blizzard account ID. The API returns basic details about
  // the players' career - display names, levels, and portraits, for each
  // platform the player participated in.
};function portraitUrl(portraitId, options) {
  return _util2.default.format(options.portraitUrlTemplate, portraitId);
}function main(callerOptions = {}) {
  const sharedOptions = _extends({}, defaultOptions, callerOptions);

  // Make sure we know how the caller expects names to be normalized
  if (['snake', 'camel'].indexOf(sharedOptions.normalizeNamesAs) === -1) {
    throw new Error('normalizeNamesAs must be set to \'snake\' or \'camel\'');
  }

  // This will blow-up if the caller overrides callerOptions in weird ways
  const defaultPlatform = sharedOptions.defaultPlatform;

  // Prepare an instance of `request` configured with requestOptions
  // as provided by the caller (or from defaultOptions)
  const req = _requestPromise2.default.defaults(sharedOptions.requestOptions);

  log('default platform', defaultPlatform);

  return {
    player(name) {
      return _asyncToGenerator(function* () {
        return findPlayer(req, sharedOptions, name);
      })();
    },

    playerStats(name, platform = defaultPlatform) {
      return _asyncToGenerator(function* () {
        return findPlayerStats(req, sharedOptions, platform, name);
      })();
    }
  };
}